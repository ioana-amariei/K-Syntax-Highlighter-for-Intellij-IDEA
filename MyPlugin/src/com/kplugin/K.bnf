{
  parserClass="com.kplugin.parser.KParser"

  extends="com.intellij.extapi.psi.ASTWrapperPsiElement"

  psiClassPrefix="K"
  psiImplClassSuffix="Impl"
  psiPackage="com.kplugin.psi"
  psiImplPackage="com.kplugin.psi.impl"

  elementTypeHolderClass="com.kplugin.psi.KTypes"
  elementTypeClass="com.kplugin.psi.KElementType"
  tokenTypeClass="com.kplugin.psi.KTokenType"
}


kFile ::= (CRLF|WS|COMMENT)* header_block (module_definition CRLF*)+

header_block ::= header_line*

header_line ::= REQUIRE CRLF+

private module_definition ::= (CRLF|WS|COMMENT)* module_start (WS|COMMENT)* module_body (WS|COMMENT)* module_end (WS|COMMENT)*

module_start ::= WS* MODULE WS+ MODULE_NAME WS* CRLF*

module_body ::= ((imports_block (CRLF|WS|COMMENT)* syntax_block  (CRLF|WS|COMMENT)*)
                | (imports_block (CRLF|WS|COMMENT)* rule_block  (CRLF|WS|COMMENT)*)
                |(imports_block (CRLF|WS|COMMENT)* configuration_block  (CRLF|WS|COMMENT)*))+

imports_block ::= imports_line*

imports_line ::= WS* IMPORTS WS+ MODULE_NAME WS* CRLF*

syntax_block ::= (WS* SYNTAX WS+ statement CRLF*)+

statement ::= TYPE WS+ ASSIGN WS+ expression_block

expression_block ::= (WS* expression_ WS* list_options? CRLF* WS* (SPECIAL_SIGN | precedence_)?)+

expression_ ::=   STRING_VALUE
                | TYPE
                | (TYPE WS* STRING_VALUE? WS* TYPE)
                |(STRING_VALUE WS* (TYPE WS*)* WS* STRING_VALUE (TYPE WS*)*)

precedence_ ::= SPECIAL_SIGN WS* (OPTION | TYPE) WS*  SPECIAL_SIGN? CRLF*

list_options ::= OPTION

rule_block ::= (WS* RULE WS* rule_ CRLF*)+

           // rule I1:Int + I2:Int => I1 +Int I2
rule_ ::= ((ID SPECIAL_SIGN TYPE  WS* SPECIAL_SIGN? WS*)+ WS* ID WS* SPECIAL_SIGN TYPE? WS* ID CRLF* condition_? WS* OPTION?)
        | ((STRING WS*)+ WS* ID (SPECIAL_SIGN TYPE)? WS* STRING WS* ID (SPECIAL_SIGN TYPE)? WS* SPECIAL_SIGN WS* ID (SPECIAL_SIGN TYPE)? WS* OPTION?)
        | (ID? SPECIAL_SIGN? TYPE? WS* (SPECIAL_SIGN WS*) OPTION?)*

condition_ ::= WS* WHEN WS* ID WS* SPECIAL_SIGN TYPE WS* ID

configuration_block ::= (WS* CONFIGURATION WS* configuration_ CRLF*)+

// configuration <k> $PGM:Expressions </k>
configuration_ ::= cell_ WS* SPECIAL_SIGN? WS* PGM WS* SPECIAL_SIGN TYPE WS* cell_

cell_ ::= WS* SPECIAL_SIGN* WS* STRING WS* SPECIAL_SIGN

module_end ::= ENDMODULE CRLF*

item_ ::= (property|COMMENT|CRLF)

property ::= (KEY? SEPARATOR VALUE?) | KEY