{
  parserClass="com.kplugin.parser.KParser"

  extends="com.intellij.extapi.psi.ASTWrapperPsiElement"

  psiClassPrefix="K"
  psiImplClassSuffix="Impl"
  psiPackage="com.kplugin.psi"
  psiImplPackage="com.kplugin.psi.impl"

  elementTypeHolderClass="com.kplugin.psi.KTypes"
  elementTypeClass="com.kplugin.psi.KElementType"
  tokenTypeClass="com.kplugin.psi.KTokenType"
}

kFile ::= (CRLF|WS|COMMENT)* header_block (module_definition CRLF*)+

header_block ::= header_line*

header_line ::= REQUIRE (CRLF+ WS*)*

module_definition ::= (CRLF|WS|COMMENT)* module_start (WS|COMMENT)* module_body (CRLF|WS|COMMENT)* module_end (CRLF|WS|COMMENT)*

module_start ::= WS* MODULE WS+ MODULE_NAME WS* CRLF*

module_body ::= (imports_block (CRLF|WS|COMMENT)* block_type  (CRLF|WS|COMMENT)*)+

block_type ::= syntax_block
            | rule_block
            | configuration_block

imports_block ::= imports_line*

imports_line ::= WS* IMPORTS WS+ MODULE_NAME WS* CRLF*

syntax_block ::= (WS* SYNTAX WS+ statement CRLF*)+

statement ::= TYPE WS+ ASSIGN WS+ expression_block

expression_block ::= (WS* expression_  WS* list_options? WS* COMMENT* CRLF* WS* SPECIAL_SIGN?)+

expression_ ::=   STRING_VALUE
                | TYPE
                | (TYPE WS* STRING_VALUE? WS* TYPE)
                |(STRING_VALUE WS* (TYPE WS*)* WS* STRING_VALUE (TYPE WS*)*)
                | precedence_

precedence_ ::= SPECIAL_SIGN? WS* (OPTION | TYPE) WS* SPECIAL_SIGN

list_options ::= OPTION

rule_block ::= (WS* RULE WS* rule_ CRLF*)+

rule_ ::= (special_rule+ CRLF* condition_? (CRLF|WS)*)
        | (((STRING | ID | SPECIAL_SIGN | TYPE) WS*)+ WS* condition_? WS* list_options?)

condition_ ::= WS* WHEN WS* condition_type

condition_type ::= (ID WS* SPECIAL_SIGN TYPE WS* ID)
                 | (STRING | ID | SPECIAL_SIGN | WS)*

special_rule ::= WS* cell_start WS* content WS* cell_end WS* list_options? CRLF*

content ::= WS* (SPECIAL_SIGN | ID | WS)+ WS*

configuration_block ::= (WS* CONFIGURATION (CRLF|WS)* configuration_+ CRLF*)+

configuration_ ::= (CRLF|WS)* cell_start (CRLF|WS)* cell_content (CRLF|WS)* cell_end (CRLF|WS)* COMMENT* (CRLF|WS)*

cell_content ::= WS* ((PGM? SPECIAL_SIGN TYPE WS*) | configuration_*)

cell_start ::= (WS|CRLF)* SPECIAL_SIGN WS* (STRING|ID) WS* ((STRING|ID) SPECIAL_SIGN STRING_VALUE)? WS* SPECIAL_SIGN WS*

cell_end ::= (WS|CRLF)* SPECIAL_SIGN SPECIAL_SIGN WS* ((STRING|ID) WS*)+ SPECIAL_SIGN WS*

module_end ::= (CRLF|WS)* ENDMODULE CRLF*

item_ ::= (property|COMMENT|CRLF)

property ::= (KEY? SEPARATOR VALUE?) | KEY