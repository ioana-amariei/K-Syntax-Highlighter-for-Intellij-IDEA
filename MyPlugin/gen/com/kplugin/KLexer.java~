/* The following code was generated by JFlex 1.7.0 tweaked for IntelliJ platform */

package com.kplugin;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import com.kplugin.psi.KTypes;
import com.intellij.psi.TokenType;

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>K.flex</tt>
 */
class KLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int WAITING_VALUE = 2;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1, 1
  };

  /** 
   * Translates characters to character classes
   * Chosen bits are [7, 7, 7]
   * Total runtime size is 1928 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[(ZZ_CMAP_Y[ZZ_CMAP_Z[ch>>14]|((ch>>7)&0x7f)]<<7)|(ch&0x7f)];
  }

  /* The ZZ_CMAP_Z table has 68 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
    "\1\0\103\200");

  /* The ZZ_CMAP_Y table has 256 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
    "\1\0\1\1\53\2\1\3\22\2\1\4\37\2\1\3\237\2");

  /* The ZZ_CMAP_A table has 640 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
    "\11\0\1\4\1\2\1\3\1\6\1\1\22\0\1\7\1\67\1\45\1\65\1\22\1\65\1\56\1\73\1\74"+
    "\1\75\1\11\1\65\1\76\1\31\1\46\1\10\1\52\11\101\1\61\1\67\1\66\1\12\1\64\2"+
    "\67\1\36\5\30\1\24\5\30\1\25\1\34\1\30\1\23\2\30\1\32\1\35\3\30\1\37\1\33"+
    "\1\30\1\71\1\5\1\72\1\67\1\53\1\0\1\50\1\77\1\54\1\15\1\20\1\55\1\27\1\60"+
    "\1\40\1\62\1\100\1\17\1\13\1\21\1\14\1\26\1\44\1\41\1\43\1\42\1\16\1\62\1"+
    "\57\1\51\1\47\1\62\1\67\1\63\1\67\1\70\6\0\1\3\32\0\1\4\337\0\1\4\177\0\13"+
    "\4\35\0\2\3\5\0\1\4\57\0\1\4\40\0");

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\2\0\1\1\1\2\1\3\3\4\4\5\1\4\1\6"+
    "\1\4\3\5\1\1\1\4\2\6\2\5\5\4\1\5"+
    "\1\7\3\10\1\1\1\10\1\11\2\0\5\5\1\12"+
    "\1\13\7\5\3\0\1\14\1\0\2\5\4\0\1\5"+
    "\1\0\1\3\1\7\1\0\5\5\1\12\7\5\4\0"+
    "\2\5\1\15\1\16\1\0\1\5\1\11\1\5\1\16"+
    "\1\5\1\17\2\5\1\20\3\5\2\0\1\5\1\21"+
    "\1\0\10\5\1\22\1\5\1\0\1\5\1\23\4\5"+
    "\1\16\1\24\1\5\1\0\2\5\1\25\1\5\1\0"+
    "\1\5\1\0\1\5\1\13\1\26\2\0\1\5\1\0"+
    "\1\27\1\5\2\0\3\5\1\30";

  private static int [] zzUnpackAction() {
    int [] result = new int[151];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\102\0\204\0\306\0\u0108\0\u014a\0\204\0\u018c"+
    "\0\u01ce\0\u0210\0\u0252\0\u0294\0\u02d6\0\u0318\0\u0210\0\u035a"+
    "\0\u039c\0\u03de\0\u0420\0\u0462\0\u0210\0\204\0\u04a4\0\u04e6"+
    "\0\u0528\0\u056a\0\u05ac\0\u05ee\0\u0630\0\u0672\0\u06b4\0\u06f6"+
    "\0\u0108\0\u0738\0\u077a\0\u07bc\0\u07fe\0\u0840\0\u05ac\0\u0882"+
    "\0\u08c4\0\u0906\0\u0948\0\u098a\0\u09cc\0\u0a0e\0\u0a50\0\u0a92"+
    "\0\u0ad4\0\u0b16\0\u0b58\0\u0b9a\0\u0bdc\0\u0c1e\0\u0c60\0\u0ca2"+
    "\0\204\0\u0ce4\0\u0d26\0\u0d68\0\u0daa\0\u0dec\0\u0e2e\0\u0e70"+
    "\0\u0eb2\0\u077a\0\u06f6\0\u0ef4\0\u0f36\0\u0f78\0\u0fba\0\u0ffc"+
    "\0\u103e\0\u1080\0\u10c2\0\u1104\0\u1146\0\u1188\0\u11ca\0\u120c"+
    "\0\u124e\0\u1290\0\u12d2\0\u1314\0\u1356\0\u1398\0\u13da\0\u141c"+
    "\0\204\0\204\0\u145e\0\u14a0\0\204\0\u14e2\0\u0210\0\u1524"+
    "\0\u0210\0\u1566\0\u15a8\0\u0210\0\u15ea\0\u162c\0\u166e\0\u16b0"+
    "\0\u16f2\0\u1734\0\u0210\0\u1776\0\u17b8\0\u17fa\0\u183c\0\u187e"+
    "\0\u18c0\0\u1902\0\u1944\0\u1986\0\204\0\u19c8\0\u1a0a\0\u1a4c"+
    "\0\u0210\0\u1a8e\0\u1ad0\0\u1b12\0\u1b54\0\u1b96\0\u0210\0\u1bd8"+
    "\0\u1c1a\0\u1c5c\0\u1c9e\0\u0210\0\u1ce0\0\u1d22\0\u1d64\0\u1da6"+
    "\0\u1de8\0\u0210\0\u0210\0\u1e2a\0\u1e6c\0\u1eae\0\u1ef0\0\u0210"+
    "\0\u1f32\0\u1f74\0\u1fb6\0\u1ff8\0\u203a\0\u207c\0\u0210";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[151];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\3\3\4\1\5\1\3\1\4\1\5\1\6\1\7"+
    "\1\10\1\11\3\12\1\13\1\14\1\12\1\15\3\16"+
    "\2\12\1\16\1\17\6\16\1\20\1\21\1\12\1\22"+
    "\1\12\1\23\1\24\3\12\1\25\1\26\1\27\2\12"+
    "\1\30\1\12\1\31\1\12\1\32\1\7\1\17\1\33"+
    "\1\7\1\34\1\35\1\7\1\17\3\7\1\36\1\12"+
    "\1\25\1\37\1\40\1\41\1\40\1\42\1\43\1\41"+
    "\1\44\72\37\103\0\3\4\1\5\1\0\1\4\1\5"+
    "\73\0\4\5\1\0\2\5\102\0\1\45\1\46\100\0"+
    "\1\47\53\0\1\7\30\0\1\12\1\50\30\12\2\0"+
    "\4\12\1\0\5\12\1\0\1\12\2\0\1\12\2\0"+
    "\1\12\2\0\1\12\3\0\3\12\13\0\32\12\2\0"+
    "\4\12\1\0\5\12\1\0\1\12\2\0\1\12\2\0"+
    "\1\12\2\0\1\12\3\0\3\12\13\0\5\12\1\51"+
    "\24\12\2\0\4\12\1\0\5\12\1\0\1\12\2\0"+
    "\1\12\2\0\1\12\2\0\1\12\3\0\3\12\13\0"+
    "\6\12\1\52\23\12\2\0\4\12\1\0\5\12\1\0"+
    "\1\12\2\0\1\12\2\0\1\12\2\0\1\12\3\0"+
    "\3\12\13\0\10\12\1\53\2\12\1\54\16\12\2\0"+
    "\4\12\1\0\5\12\1\0\1\12\2\0\1\12\2\0"+
    "\1\12\2\0\1\12\3\0\3\12\13\0\7\55\1\12"+
    "\3\56\2\55\1\56\1\57\6\56\5\55\2\0\3\55"+
    "\1\25\1\0\2\55\1\12\2\55\1\0\1\55\2\0"+
    "\1\12\2\0\1\12\2\0\1\12\3\0\2\55\1\25"+
    "\13\0\1\60\31\12\2\0\4\12\1\0\5\12\1\0"+
    "\1\12\2\0\1\12\2\0\1\12\2\0\1\12\3\0"+
    "\3\12\13\0\3\12\1\61\1\12\1\62\17\12\1\63"+
    "\4\12\2\0\4\12\1\0\5\12\1\0\1\12\2\0"+
    "\1\12\2\0\1\12\2\0\1\12\3\0\3\12\13\0"+
    "\27\12\1\64\2\12\2\0\1\65\3\12\1\0\5\12"+
    "\1\0\1\12\2\0\1\12\2\0\1\12\2\0\1\12"+
    "\3\0\3\12\5\0\1\66\2\0\3\66\7\67\1\70"+
    "\22\67\1\71\1\66\4\67\1\0\5\67\1\66\1\67"+
    "\2\66\1\67\2\66\1\67\2\66\1\70\3\66\3\67"+
    "\46\0\1\72\46\0\1\12\1\73\30\12\2\0\4\12"+
    "\1\0\5\12\1\0\1\12\2\0\1\12\2\0\1\12"+
    "\2\0\1\12\3\0\3\12\13\0\32\12\2\0\4\12"+
    "\1\0\4\12\1\74\1\0\1\12\2\0\1\12\2\0"+
    "\1\12\2\0\1\12\3\0\3\12\61\0\1\75\51\0"+
    "\1\76\62\0\1\7\102\0\32\12\2\0\4\12\1\0"+
    "\5\12\1\0\1\12\1\0\1\7\1\12\2\0\1\12"+
    "\2\0\1\12\3\0\3\12\13\0\7\77\4\0\2\77"+
    "\10\0\3\77\1\100\1\77\2\0\3\77\2\0\2\77"+
    "\1\0\2\77\1\0\1\77\11\0\2\77\1\0\2\77"+
    "\14\0\26\12\1\101\3\12\2\0\4\12\1\0\5\12"+
    "\1\0\1\12\2\0\1\12\2\0\1\12\2\0\1\12"+
    "\3\0\3\12\2\37\1\0\2\37\1\102\1\0\74\37"+
    "\1\103\1\5\2\103\1\102\1\5\1\103\73\37\1\42"+
    "\1\44\2\42\1\102\1\44\1\42\73\37\1\104\100\37"+
    "\1\0\4\44\1\0\2\44\72\0\1\45\3\0\2\45"+
    "\1\0\73\45\11\46\1\105\70\46\13\0\2\12\1\106"+
    "\27\12\2\0\4\12\1\0\5\12\1\0\1\12\2\0"+
    "\1\12\2\0\1\12\2\0\1\12\3\0\3\12\13\0"+
    "\32\12\2\0\4\12\1\0\1\12\1\107\3\12\1\0"+
    "\1\12\2\0\1\12\2\0\1\12\2\0\1\12\3\0"+
    "\3\12\13\0\2\12\1\110\27\12\2\0\4\12\1\0"+
    "\5\12\1\0\1\12\2\0\1\12\2\0\1\12\2\0"+
    "\1\12\3\0\3\12\13\0\11\12\1\111\2\12\1\112"+
    "\15\12\2\0\4\12\1\0\5\12\1\0\1\12\2\0"+
    "\1\12\2\0\1\12\2\0\1\12\3\0\3\12\13\0"+
    "\14\12\1\112\15\12\2\0\4\12\1\0\5\12\1\0"+
    "\1\12\2\0\1\12\2\0\1\12\2\0\1\12\3\0"+
    "\3\12\13\0\7\55\1\12\3\113\2\55\1\113\1\12"+
    "\6\113\5\55\2\0\3\55\1\12\1\0\2\55\1\12"+
    "\2\55\1\0\1\55\2\0\1\12\2\0\1\12\2\0"+
    "\1\12\3\0\2\55\1\12\13\0\7\55\1\12\3\56"+
    "\2\55\1\56\1\57\6\56\5\55\2\0\3\55\1\12"+
    "\1\0\2\55\1\12\2\55\1\0\1\55\2\0\1\12"+
    "\2\0\1\12\2\0\1\12\3\0\2\55\1\12\13\0"+
    "\17\12\1\114\12\12\2\0\4\12\1\0\5\12\1\0"+
    "\1\12\2\0\1\12\2\0\1\12\2\0\1\12\3\0"+
    "\3\12\13\0\13\12\1\115\16\12\2\0\4\12\1\0"+
    "\5\12\1\0\1\12\2\0\1\12\2\0\1\12\2\0"+
    "\1\12\3\0\3\12\13\0\4\12\1\116\25\12\2\0"+
    "\4\12\1\0\5\12\1\0\1\12\2\0\1\12\2\0"+
    "\1\12\2\0\1\12\3\0\3\12\13\0\31\12\1\117"+
    "\2\0\4\12\1\0\5\12\1\0\1\12\2\0\1\12"+
    "\2\0\1\12\2\0\1\12\3\0\3\12\13\0\14\12"+
    "\1\120\15\12\2\0\4\12\1\0\5\12\1\0\1\12"+
    "\2\0\1\12\2\0\1\12\2\0\1\12\3\0\3\12"+
    "\13\0\26\12\1\121\3\12\2\0\4\12\1\0\5\12"+
    "\1\0\1\12\2\0\1\12\2\0\1\12\2\0\1\12"+
    "\3\0\3\12\13\0\6\12\1\122\23\12\2\0\4\12"+
    "\1\0\5\12\1\0\1\12\2\0\1\12\2\0\1\12"+
    "\2\0\1\12\3\0\3\12\5\0\1\66\2\0\12\66"+
    "\1\0\22\66\1\71\5\66\1\0\17\66\1\0\6\66"+
    "\5\0\1\66\2\0\1\123\2\66\7\67\1\70\22\67"+
    "\1\71\1\124\4\67\1\0\5\67\1\66\1\67\2\66"+
    "\1\67\2\66\1\67\2\66\1\70\3\66\3\67\10\0"+
    "\1\125\2\0\32\70\1\0\1\126\4\70\1\0\5\70"+
    "\1\0\1\70\2\0\1\70\2\0\1\70\2\0\1\70"+
    "\3\0\3\70\46\0\1\7\46\0\6\12\1\127\23\12"+
    "\2\0\4\12\1\0\5\12\1\0\1\12\2\0\1\12"+
    "\2\0\1\12\2\0\1\12\3\0\3\12\13\0\5\12"+
    "\1\130\24\12\2\0\4\12\1\0\5\12\1\0\1\12"+
    "\2\0\1\12\2\0\1\12\2\0\1\12\3\0\3\12"+
    "\12\0\1\131\153\0\1\7\24\0\1\77\3\0\7\77"+
    "\4\0\2\77\10\0\3\77\1\100\1\77\2\0\3\77"+
    "\2\0\2\77\1\0\2\77\1\0\1\77\7\0\1\132"+
    "\1\0\5\77\10\0\1\77\3\0\7\77\4\0\2\77"+
    "\10\0\2\77\1\133\1\100\1\77\2\0\3\77\2\0"+
    "\2\77\1\0\2\77\1\0\1\77\7\0\1\132\1\0"+
    "\5\77\14\0\32\12\2\0\1\12\1\134\2\12\1\0"+
    "\5\12\1\0\1\12\2\0\1\12\2\0\1\12\2\0"+
    "\1\12\3\0\3\12\5\37\1\102\1\0\73\37\10\46"+
    "\1\135\1\105\70\46\13\0\3\12\1\136\26\12\2\0"+
    "\4\12\1\0\5\12\1\0\1\12\2\0\1\12\2\0"+
    "\1\12\2\0\1\12\3\0\3\12\13\0\27\12\1\137"+
    "\2\12\2\0\4\12\1\0\5\12\1\0\1\12\2\0"+
    "\1\12\2\0\1\12\2\0\1\12\3\0\3\12\13\0"+
    "\1\140\31\12\2\0\4\12\1\0\5\12\1\0\1\12"+
    "\2\0\1\12\2\0\1\12\2\0\1\12\3\0\3\12"+
    "\13\0\12\12\1\141\17\12\2\0\4\12\1\0\5\12"+
    "\1\0\1\12\2\0\1\12\2\0\1\12\2\0\1\12"+
    "\3\0\3\12\13\0\1\141\31\12\2\0\4\12\1\0"+
    "\5\12\1\0\1\12\2\0\1\12\2\0\1\12\2\0"+
    "\1\12\3\0\3\12\13\0\7\113\4\12\2\113\10\12"+
    "\5\113\2\0\3\113\1\12\1\0\2\113\1\12\2\113"+
    "\1\0\1\113\2\0\1\12\2\0\1\12\2\0\1\12"+
    "\3\0\2\113\1\12\13\0\20\12\1\142\11\12\2\0"+
    "\4\12\1\0\5\12\1\0\1\12\2\0\1\12\2\0"+
    "\1\12\2\0\1\12\3\0\3\12\13\0\1\12\1\143"+
    "\30\12\2\0\4\12\1\0\5\12\1\0\1\12\2\0"+
    "\1\12\2\0\1\12\2\0\1\12\3\0\3\12\13\0"+
    "\5\12\1\144\24\12\2\0\4\12\1\0\5\12\1\0"+
    "\1\12\2\0\1\12\2\0\1\12\2\0\1\12\3\0"+
    "\3\12\13\0\3\12\1\145\26\12\2\0\4\12\1\0"+
    "\5\12\1\0\1\12\2\0\1\12\2\0\1\12\2\0"+
    "\1\12\3\0\3\12\13\0\32\12\2\0\4\12\1\0"+
    "\4\12\1\107\1\0\1\12\2\0\1\12\2\0\1\12"+
    "\2\0\1\12\3\0\3\12\13\0\25\12\1\146\4\12"+
    "\2\0\4\12\1\0\5\12\1\0\1\12\2\0\1\12"+
    "\2\0\1\12\2\0\1\12\3\0\3\12\13\0\27\12"+
    "\1\147\2\12\2\0\4\12\1\0\5\12\1\0\1\12"+
    "\2\0\1\12\2\0\1\12\2\0\1\12\3\0\3\12"+
    "\5\0\1\66\2\0\3\66\7\67\1\70\22\67\1\71"+
    "\1\124\4\67\1\0\5\67\1\66\1\67\2\66\1\67"+
    "\2\66\1\67\2\66\1\70\3\66\3\67\5\0\1\66"+
    "\2\0\3\66\7\150\1\151\22\150\1\71\1\66\4\150"+
    "\1\0\5\150\1\66\1\150\2\66\1\150\2\66\1\150"+
    "\2\66\1\151\3\66\3\150\13\0\32\70\1\0\1\126"+
    "\4\70\1\0\5\70\1\0\1\70\2\0\1\70\2\0"+
    "\1\70\2\0\1\70\3\0\3\70\13\0\32\151\2\0"+
    "\4\151\1\0\5\151\1\0\1\151\2\0\1\151\2\0"+
    "\1\151\2\0\1\151\3\0\3\151\13\0\32\12\2\0"+
    "\4\12\1\0\1\12\1\152\3\12\1\0\1\12\2\0"+
    "\1\12\2\0\1\12\2\0\1\12\3\0\3\12\13\0"+
    "\6\12\1\153\23\12\2\0\4\12\1\0\5\12\1\0"+
    "\1\12\2\0\1\12\2\0\1\12\2\0\1\12\3\0"+
    "\3\12\7\0\1\77\3\0\7\77\4\0\2\77\10\0"+
    "\1\77\1\154\1\77\1\100\1\77\2\0\3\77\2\0"+
    "\2\77\1\0\2\77\1\0\1\77\7\0\1\132\1\0"+
    "\5\77\14\0\32\12\2\0\4\12\1\0\1\155\4\12"+
    "\1\0\1\12\2\0\1\12\2\0\1\12\2\0\1\12"+
    "\3\0\3\12\13\0\4\12\1\156\25\12\2\0\4\12"+
    "\1\0\5\12\1\0\1\12\2\0\1\12\2\0\1\12"+
    "\2\0\1\12\3\0\3\12\13\0\1\12\1\157\30\12"+
    "\2\0\4\12\1\0\5\12\1\0\1\12\2\0\1\12"+
    "\2\0\1\12\2\0\1\12\3\0\3\12\13\0\21\12"+
    "\1\160\10\12\2\0\4\12\1\0\5\12\1\0\1\12"+
    "\2\0\1\12\2\0\1\12\2\0\1\12\3\0\3\12"+
    "\13\0\26\12\1\161\3\12\2\0\4\12\1\0\5\12"+
    "\1\0\1\12\2\0\1\12\2\0\1\12\2\0\1\12"+
    "\3\0\3\12\13\0\25\12\1\162\4\12\2\0\4\12"+
    "\1\0\5\12\1\0\1\12\2\0\1\12\2\0\1\12"+
    "\2\0\1\12\3\0\3\12\13\0\32\12\2\0\4\12"+
    "\1\0\1\163\4\12\1\0\1\12\2\0\1\12\2\0"+
    "\1\12\2\0\1\12\3\0\3\12\13\0\32\12\2\0"+
    "\1\12\1\164\2\12\1\0\5\12\1\0\1\12\2\0"+
    "\1\12\2\0\1\12\2\0\1\12\3\0\3\12\5\0"+
    "\1\66\2\0\3\66\7\150\1\151\22\150\1\165\1\66"+
    "\4\150\1\0\5\150\1\66\1\150\2\66\1\150\2\66"+
    "\1\150\2\66\1\151\3\66\3\150\13\0\32\151\1\165"+
    "\1\0\4\151\1\0\5\151\1\0\1\151\2\0\1\151"+
    "\2\0\1\151\2\0\1\151\3\0\3\151\13\0\25\12"+
    "\1\166\4\12\2\0\4\12\1\0\5\12\1\0\1\12"+
    "\2\0\1\12\2\0\1\12\2\0\1\12\3\0\3\12"+
    "\7\0\1\77\3\0\7\77\4\0\2\77\10\0\1\167"+
    "\2\77\1\100\1\77\2\0\3\77\2\0\2\77\1\0"+
    "\2\77\1\0\1\77\7\0\1\132\1\0\5\77\14\0"+
    "\32\12\2\0\4\12\1\0\5\12\1\0\1\12\2\0"+
    "\1\12\2\0\1\12\2\0\1\12\3\0\1\12\1\170"+
    "\1\12\13\0\5\12\1\171\24\12\2\0\4\12\1\0"+
    "\5\12\1\0\1\12\2\0\1\12\2\0\1\12\2\0"+
    "\1\12\3\0\3\12\13\0\2\12\1\172\27\12\2\0"+
    "\4\12\1\0\5\12\1\0\1\12\2\0\1\12\2\0"+
    "\1\12\2\0\1\12\3\0\3\12\13\0\22\12\1\173"+
    "\7\12\2\0\4\12\1\0\5\12\1\0\1\12\2\0"+
    "\1\12\2\0\1\12\2\0\1\12\3\0\3\12\13\0"+
    "\27\12\1\174\2\12\2\0\4\12\1\0\5\12\1\0"+
    "\1\12\2\0\1\12\2\0\1\12\2\0\1\12\3\0"+
    "\3\12\13\0\26\12\1\175\3\12\2\0\4\12\1\0"+
    "\5\12\1\0\1\12\2\0\1\12\2\0\1\12\2\0"+
    "\1\12\3\0\3\12\13\0\27\12\1\176\2\12\2\0"+
    "\4\12\1\0\5\12\1\0\1\12\2\0\1\12\2\0"+
    "\1\12\2\0\1\12\3\0\3\12\13\0\32\12\2\0"+
    "\2\12\1\177\1\12\1\0\5\12\1\0\1\12\2\0"+
    "\1\12\2\0\1\12\2\0\1\12\3\0\3\12\13\0"+
    "\14\12\1\200\15\12\2\0\4\12\1\0\5\12\1\0"+
    "\1\12\2\0\1\12\2\0\1\12\2\0\1\12\3\0"+
    "\3\12\7\0\1\77\3\0\7\77\4\0\2\77\10\0"+
    "\3\77\1\100\1\77\2\0\3\77\2\0\1\201\1\77"+
    "\1\0\2\77\1\0\1\77\7\0\1\132\1\0\5\77"+
    "\14\0\5\12\1\107\24\12\2\0\4\12\1\0\5\12"+
    "\1\0\1\12\2\0\1\12\2\0\1\12\2\0\1\12"+
    "\3\0\3\12\13\0\3\12\1\202\26\12\2\0\4\12"+
    "\1\0\5\12\1\0\1\12\2\0\1\12\2\0\1\12"+
    "\2\0\1\12\3\0\3\12\13\0\23\12\1\203\6\12"+
    "\2\0\4\12\1\0\5\12\1\0\1\12\2\0\1\12"+
    "\2\0\1\12\2\0\1\12\3\0\3\12\13\0\30\12"+
    "\1\204\1\12\2\0\4\12\1\0\5\12\1\0\1\12"+
    "\2\0\1\12\2\0\1\12\2\0\1\12\3\0\3\12"+
    "\13\0\5\12\1\205\24\12\2\0\4\12\1\0\5\12"+
    "\1\0\1\12\2\0\1\12\2\0\1\12\2\0\1\12"+
    "\3\0\3\12\13\0\32\12\2\0\4\12\1\0\5\12"+
    "\1\0\1\12\2\0\1\12\2\0\1\12\2\0\1\12"+
    "\1\206\2\0\3\12\13\0\3\12\1\207\26\12\2\0"+
    "\4\12\1\0\5\12\1\0\1\12\2\0\1\12\2\0"+
    "\1\12\2\0\1\12\3\0\3\12\7\0\1\77\3\0"+
    "\7\77\4\0\2\77\10\0\2\77\1\210\1\100\1\77"+
    "\2\0\3\77\2\0\2\77\1\0\2\77\1\0\1\77"+
    "\7\0\1\132\1\0\5\77\14\0\4\12\1\211\25\12"+
    "\2\0\4\12\1\0\5\12\1\0\1\12\2\0\1\12"+
    "\2\0\1\12\2\0\1\12\3\0\3\12\13\0\24\12"+
    "\1\212\5\12\2\0\4\12\1\0\5\12\1\0\1\12"+
    "\2\0\1\12\2\0\1\12\2\0\1\12\3\0\3\12"+
    "\13\0\30\12\1\213\1\12\2\0\4\12\1\0\5\12"+
    "\1\0\1\12\2\0\1\12\2\0\1\12\2\0\1\12"+
    "\3\0\3\12\52\0\1\214\26\0\1\215\13\0\26\12"+
    "\1\216\3\12\2\0\4\12\1\0\5\12\1\0\1\12"+
    "\2\0\1\12\2\0\1\12\2\0\1\12\3\0\3\12"+
    "\7\0\1\77\3\0\7\77\4\0\2\77\10\0\3\77"+
    "\1\100\1\77\2\0\3\77\2\0\2\77\1\0\2\77"+
    "\1\0\1\77\7\0\1\132\1\0\1\217\4\77\14\0"+
    "\5\12\1\220\24\12\2\0\4\12\1\0\5\12\1\0"+
    "\1\12\2\0\1\12\2\0\1\12\2\0\1\12\3\0"+
    "\3\12\75\0\1\132\56\0\1\215\22\0\1\132\3\0"+
    "\1\215\13\0\32\12\2\0\1\12\1\221\2\12\1\0"+
    "\5\12\1\0\1\12\2\0\1\12\2\0\1\12\2\0"+
    "\1\12\3\0\3\12\7\0\1\77\3\0\7\77\4\0"+
    "\2\77\10\0\3\77\1\100\1\77\2\0\3\77\1\222"+
    "\1\0\2\77\1\0\2\77\1\0\1\77\7\0\1\132"+
    "\1\0\5\77\1\223\13\0\27\12\1\224\2\12\2\0"+
    "\4\12\1\0\5\12\1\0\1\12\2\0\1\12\2\0"+
    "\1\12\2\0\1\12\3\0\3\12\75\0\1\77\56\0"+
    "\1\223\22\0\1\77\3\0\1\223\13\0\25\12\1\225"+
    "\4\12\2\0\4\12\1\0\5\12\1\0\1\12\2\0"+
    "\1\12\2\0\1\12\2\0\1\12\3\0\3\12\13\0"+
    "\1\12\1\226\30\12\2\0\4\12\1\0\5\12\1\0"+
    "\1\12\2\0\1\12\2\0\1\12\2\0\1\12\3\0"+
    "\3\12\13\0\6\12\1\227\23\12\2\0\4\12\1\0"+
    "\5\12\1\0\1\12\2\0\1\12\2\0\1\12\2\0"+
    "\1\12\3\0\3\12";

  private static int [] zzUnpackTrans() {
    int [] result = new int[8382];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\2\0\1\11\3\1\1\11\16\1\1\11\17\1\2\0"+
    "\16\1\3\0\1\11\1\0\2\1\4\0\1\1\1\0"+
    "\2\1\1\0\15\1\4\0\2\1\2\11\1\0\1\1"+
    "\1\11\12\1\2\0\2\1\1\0\10\1\1\11\1\1"+
    "\1\0\11\1\1\0\4\1\1\0\1\1\1\0\3\1"+
    "\2\0\1\1\1\0\2\1\2\0\4\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[151];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  KLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        zzDoEOF();
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return TokenType.BAD_CHARACTER;
            } 
            // fall through
          case 25: break;
          case 2: 
            { yybegin(YYINITIAL); return KTypes.CRLF;
            } 
            // fall through
          case 26: break;
          case 3: 
            { yybegin(YYINITIAL); return KTypes.WS;
            } 
            // fall through
          case 27: break;
          case 4: 
            { yybegin(YYINITIAL); return KTypes.SPECIAL_SIGN;
            } 
            // fall through
          case 28: break;
          case 5: 
            { yybegin(YYINITIAL); return KTypes.STRING;
            } 
            // fall through
          case 29: break;
          case 6: 
            { yybegin(YYINITIAL); return KTypes.ID;
            } 
            // fall through
          case 30: break;
          case 7: 
            { yybegin(YYINITIAL); return KTypes.VALUE;
            } 
            // fall through
          case 31: break;
          case 8: 
            { yybegin(WAITING_VALUE); return KTypes.WS;
            } 
            // fall through
          case 32: break;
          case 9: 
            { yybegin(YYINITIAL); return KTypes.COMMENT;
            } 
            // fall through
          case 33: break;
          case 10: 
            { yybegin(YYINITIAL); return KTypes.TYPE;
            } 
            // fall through
          case 34: break;
          case 11: 
            { yybegin(YYINITIAL); return KTypes.MODULE_NAME;
            } 
            // fall through
          case 35: break;
          case 12: 
            { yybegin(YYINITIAL); return KTypes.STRING_VALUE;
            } 
            // fall through
          case 36: break;
          case 13: 
            { yybegin(YYINITIAL); return KTypes.ASSIGN;
            } 
            // fall through
          case 37: break;
          case 14: 
            { yybegin(YYINITIAL); return KTypes.OPTION;
            } 
            // fall through
          case 38: break;
          case 15: 
            { yybegin(YYINITIAL); return KTypes.PGM;
            } 
            // fall through
          case 39: break;
          case 16: 
            { yybegin(YYINITIAL); return KTypes.RULE;
            } 
            // fall through
          case 40: break;
          case 17: 
            { yybegin(YYINITIAL); return KTypes.WHEN;
            } 
            // fall through
          case 41: break;
          case 18: 
            { yybegin(YYINITIAL); return KTypes.PATH;
            } 
            // fall through
          case 42: break;
          case 19: 
            { yybegin(YYINITIAL); return KTypes.MODULE;
            } 
            // fall through
          case 43: break;
          case 20: 
            { yybegin(YYINITIAL); return KTypes.SYNTAX;
            } 
            // fall through
          case 44: break;
          case 21: 
            { yybegin(YYINITIAL); return KTypes.IMPORTS;
            } 
            // fall through
          case 45: break;
          case 22: 
            { yybegin(YYINITIAL); return KTypes.REQUIRE;
            } 
            // fall through
          case 46: break;
          case 23: 
            { yybegin(YYINITIAL); return KTypes.ENDMODULE;
            } 
            // fall through
          case 47: break;
          case 24: 
            { yybegin(YYINITIAL); return KTypes.CONFIGURATION;
            } 
            // fall through
          case 48: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
