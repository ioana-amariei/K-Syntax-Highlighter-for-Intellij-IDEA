/* The following code was generated by JFlex 1.7.0 tweaked for IntelliJ platform */

package com.kplugin;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import com.kplugin.psi.KTypes;
import com.intellij.psi.TokenType;

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>K.flex</tt>
 */
class KLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int WAITING_VALUE = 2;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1, 1
  };

  /** 
   * Translates characters to character classes
   * Chosen bits are [7, 7, 7]
   * Total runtime size is 1928 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[(ZZ_CMAP_Y[ZZ_CMAP_Z[ch>>14]|((ch>>7)&0x7f)]<<7)|(ch&0x7f)];
  }

  /* The ZZ_CMAP_Z table has 68 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
    "\1\0\103\200");

  /* The ZZ_CMAP_Y table has 256 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
    "\1\0\1\1\53\2\1\3\22\2\1\4\37\2\1\3\237\2");

  /* The ZZ_CMAP_A table has 640 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
    "\11\0\1\4\1\2\1\3\1\6\1\1\22\0\1\7\1\10\1\43\1\10\4\0\1\52\1\53\2\0\1\47\1"+
    "\22\3\0\2\54\7\0\1\44\2\0\1\11\3\0\1\27\14\21\1\25\4\21\1\23\1\26\3\21\1\30"+
    "\1\24\1\21\1\46\1\5\1\50\3\0\1\40\1\42\1\51\1\14\1\17\3\42\1\31\2\42\1\16"+
    "\1\12\1\20\1\13\1\32\1\36\1\33\1\35\1\34\1\15\2\42\1\41\1\37\1\42\1\0\1\45"+
    "\10\0\1\3\32\0\1\4\337\0\1\4\177\0\13\4\35\0\2\3\5\0\1\4\57\0\1\4\40\0");

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\2\0\1\1\1\2\1\3\1\4\2\1\1\5\5\1"+
    "\1\6\1\1\1\7\3\10\1\1\1\10\2\0\1\11"+
    "\1\5\6\0\1\12\4\0\1\3\1\7\7\0\1\13"+
    "\1\0\1\14\5\0\1\15\13\0\1\16\4\0\1\17"+
    "\3\0\1\20\1\21\2\0\1\5\1\0\1\22\1\0";

  private static int [] zzUnpackAction() {
    int [] result = new int[83];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\55\0\132\0\207\0\264\0\341\0\u010e\0\u013b"+
    "\0\u0168\0\u0195\0\u01c2\0\u01ef\0\u021c\0\u0249\0\132\0\u0276"+
    "\0\u02a3\0\u02d0\0\264\0\u02fd\0\u032a\0\u0357\0\u0384\0\u03b1"+
    "\0\u03de\0\u040b\0\u0438\0\u0465\0\u0492\0\u04bf\0\u04ec\0\u021c"+
    "\0\u021c\0\u0519\0\u0546\0\u0573\0\u032a\0\u02d0\0\u05a0\0\u05cd"+
    "\0\u05fa\0\u0627\0\u0654\0\u0681\0\u06ae\0\u06db\0\132\0\u0708"+
    "\0\132\0\u0735\0\u0762\0\u078f\0\u07bc\0\u07e9\0\132\0\u0816"+
    "\0\u0843\0\u0870\0\u089d\0\u08ca\0\u08f7\0\u0924\0\u0951\0\u097e"+
    "\0\u09ab\0\u09d8\0\132\0\u0a05\0\u0a32\0\u0a5f\0\u0a8c\0\132"+
    "\0\u0ab9\0\u0ae6\0\u0b13\0\132\0\132\0\u0b40\0\u0b6d\0\132"+
    "\0\u0b9a\0\132\0\u0bc7";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[83];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\3\3\4\1\5\1\3\1\4\1\5\1\6\1\3"+
    "\1\7\4\3\1\10\1\3\1\11\1\3\6\11\1\12"+
    "\1\3\1\13\1\3\1\14\5\3\1\15\1\16\1\17"+
    "\1\20\6\3\1\21\1\22\1\23\1\22\1\24\1\25"+
    "\1\23\1\26\45\21\56\0\3\4\1\5\1\0\1\4"+
    "\1\5\46\0\4\5\1\0\2\5\45\0\1\6\2\0"+
    "\52\6\13\0\1\27\61\0\1\30\46\0\7\31\1\32"+
    "\1\33\6\32\12\31\6\0\1\31\15\0\1\34\57\0"+
    "\1\35\1\0\1\36\74\0\1\37\15\0\1\40\3\0"+
    "\2\40\1\0\34\40\1\41\11\40\44\0\1\42\22\0"+
    "\7\43\10\0\4\43\1\44\5\43\6\0\1\43\3\0"+
    "\2\21\1\0\2\21\1\45\1\0\47\21\1\46\1\5"+
    "\2\46\1\45\1\5\1\46\46\21\1\24\1\26\2\24"+
    "\1\45\1\26\1\24\46\21\1\47\53\21\1\0\4\26"+
    "\1\0\2\26\61\0\1\50\54\0\1\51\52\0\7\31"+
    "\10\0\12\31\6\0\1\31\24\0\1\32\1\33\6\32"+
    "\47\0\1\52\63\0\1\53\40\0\1\54\74\0\1\55"+
    "\36\0\1\56\45\0\1\57\55\0\7\43\10\0\4\43"+
    "\1\44\5\43\4\0\1\60\1\61\1\43\15\0\7\43"+
    "\10\0\3\43\1\62\1\44\5\43\4\0\1\60\1\61"+
    "\1\43\3\0\5\21\1\45\1\0\46\21\15\0\1\63"+
    "\51\0\1\64\66\0\1\65\43\0\1\66\60\0\1\67"+
    "\52\0\1\70\73\0\1\71\27\0\1\72\57\0\7\43"+
    "\10\0\2\43\1\73\1\43\1\44\5\43\4\0\1\60"+
    "\1\61\1\43\21\0\1\74\51\0\1\75\66\0\1\76"+
    "\62\0\1\77\52\0\1\100\63\0\1\101\26\0\7\43"+
    "\10\0\4\43\1\44\5\43\5\0\1\61\1\43\15\0"+
    "\7\43\10\0\1\102\3\43\1\44\5\43\4\0\1\60"+
    "\1\61\1\43\22\0\1\103\51\0\1\104\66\0\1\105"+
    "\62\0\1\106\53\0\1\107\62\0\1\110\25\0\7\43"+
    "\10\0\4\43\1\44\5\43\4\0\1\60\1\61\1\111"+
    "\20\0\1\112\66\0\1\113\62\0\1\114\36\0\1\115"+
    "\47\0\7\43\10\0\3\43\1\116\1\44\5\43\4\0"+
    "\1\60\1\61\1\43\21\0\1\117\66\0\1\120\36\0"+
    "\7\43\10\0\4\43\1\44\5\43\4\0\1\60\1\61"+
    "\1\43\1\121\21\0\1\122\111\0\1\123\53\0\1\43"+
    "\1\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[3060];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\2\0\1\11\13\1\1\11\7\1\2\0\2\1\6\0"+
    "\1\1\4\0\2\1\7\0\1\11\1\0\1\11\5\0"+
    "\1\11\13\0\1\11\4\0\1\11\3\0\2\11\2\0"+
    "\1\11\1\0\1\11\1\0";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[83];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  KLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        zzDoEOF();
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return TokenType.BAD_CHARACTER;
            } 
            // fall through
          case 19: break;
          case 2: 
            { yybegin(YYINITIAL); return KTypes.CRLF;
            } 
            // fall through
          case 20: break;
          case 3: 
            { yybegin(YYINITIAL); return KTypes.WS;
            } 
            // fall through
          case 21: break;
          case 4: 
            { yybegin(YYINITIAL); return KTypes.COMMENT;
            } 
            // fall through
          case 22: break;
          case 5: 
            { yybegin(YYINITIAL); return KTypes.MODULE_NAME;
            } 
            // fall through
          case 23: break;
          case 6: 
            { yybegin(YYINITIAL); return KTypes.OR_SIGN;
            } 
            // fall through
          case 24: break;
          case 7: 
            { yybegin(YYINITIAL); return KTypes.VALUE;
            } 
            // fall through
          case 25: break;
          case 8: 
            { yybegin(WAITING_VALUE); return KTypes.WS;
            } 
            // fall through
          case 26: break;
          case 9: 
            { yybegin(YYINITIAL); return KTypes.TYPE;
            } 
            // fall through
          case 27: break;
          case 10: 
            { yybegin(YYINITIAL); return KTypes.SIGN;
            } 
            // fall through
          case 28: break;
          case 11: 
            { yybegin(YYINITIAL); return KTypes.ASSIGN;
            } 
            // fall through
          case 29: break;
          case 12: 
            { yybegin(YYINITIAL); return KTypes.OPTION;
            } 
            // fall through
          case 30: break;
          case 13: 
            { yybegin(YYINITIAL); return KTypes.RULE;
            } 
            // fall through
          case 31: break;
          case 14: 
            { yybegin(YYINITIAL); return KTypes.MODULE;
            } 
            // fall through
          case 32: break;
          case 15: 
            { yybegin(YYINITIAL); return KTypes.SYNTAX;
            } 
            // fall through
          case 33: break;
          case 16: 
            { yybegin(YYINITIAL); return KTypes.IMPORTS;
            } 
            // fall through
          case 34: break;
          case 17: 
            { yybegin(YYINITIAL); return KTypes.REQUIRE;
            } 
            // fall through
          case 35: break;
          case 18: 
            { yybegin(YYINITIAL); return KTypes.ENDMODULE;
            } 
            // fall through
          case 36: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
